55,81c55,78
< 	lPercent = 2;
< 	lHash = 3;
< 	lExclamation = 4;
< 	lQuestion = 5;
< 	lDollar = 6;
< 	lPlus = 7;
< 	lMinus = 8;
< 	lStar = 9;
< 	lColon = 10;
< 	lEquals = 11;
< 	lDot = 12;
< 	lComma = 13;
< 	lSemicolon = 14;
< 	lQuote = 15;
< 	lLeftAngle = 16;
< 	lRightAngle = 17;
< 	lLeftParen = 18;
< 	lRightParen = 19;
< 	lLeftBracket = 20;
< 	lRightBracket = 21;
< 	lBlank = 22;
< 	lIllegal = 23;
< 	lNewLine = 24;
< 	lTab = 25;
< 	lNewPage = 26;
< 	lEndFile = 27;
< 	lastCharClass = 27;
---
> 	lPlus = 2;
> 	lMinus = 3;
> 	lStar = 4;
> 	lColon = 5;
> 	lEquals = 6;
> 	lDot = 7;
> 	lComma = 8;
> 	lSemicolon = 9;
> 	lQuote = 10;
> 	lLeftAngle = 11;
> 	lRightAngle = 12;
> 	lLeftParen = 13;
> 	lRightParen = 14;
> 	lLeftBracket = 15;
> 	lRightBracket = 16;
> 	lLeftBrace = 17;
> 	lRightBrace = 18;
> 	lBlank = 19;
> 	lIllegal = 20;
> 	lNewLine = 21;
> 	lTab = 22;
> 	lNewPage = 23;
> 	lEndFile = 24;
> 	lastCharClass = 24;
87a85
> 
100,153c98,145
< 	pThen = 4;
< 	pElse = 5;
< 	pOf = 6;
< 	pEnd = 7;
< 	pDo = 8;
< 	pArray = 9;
< 	pFile = 10;
< 	pPacked = 11;
< 	pVar = 12;
< 	pType = 13;
< 	pIf = 14;
< 	pCase = 15;
< 	pWhile = 16;
< 	pUsing = 17;
< 	pVal = 18;
< 	pDef = 19;
< 	pUnless = 20;
< 	pElsif = 21;
< 	pBreak = 22;
< 	pWhen = 23;
< 	pModule = 24;
< 	lastKeywordToken = 24;
< 	pIdentifier = 25;
< 	firstCompoundInputToken = 25;
< 	pInteger = 26;
< 	pLiteral = 27;
< 	lastCompoundInputToken = 27;
< 	pNot = 28;
< 	pNewLine = 29;
< 	pEndFile = 30;
< 	pPlus = 31;
< 	pMinus = 32;
< 	pStar = 33;
< 	pAssign = 34;
< 	pDot = 35;
< 	pComma = 36;
< 	pSemicolon = 37;
< 	pColon = 38;
< 	pEquals = 39;
< 	pNotEqual = 40;
< 	pLess = 41;
< 	pLessEqual = 42;
< 	pGreaterEqual = 43;
< 	pGreater = 44;
< 	pLeftParen = 45;
< 	pRightParen = 46;
< 	pLeftBracket = 47;
< 	pRightBracket = 48;
< 	pHash = 49;
< 	pExclamation = 50;
< 	pQuestion = 51;
< 	pDollar = 52;
< 	pDotDot = 53;
< 	lastSyntaxToken = 53;
---
> 	pNot = 4;
> 	pThen = 5;
> 	pElse = 6;
> 	pOf = 7;
> 	pEnd = 8;
> 	pUntil = 9;
> 	pDo = 10;
> 	pArray = 11;
> 	pFile = 12;
> 	pPacked = 13;
> 	pProgram = 14;
> 	pConst = 15;
> 	pVar = 16;
> 	pType = 17;
> 	pProcedure = 18;
> 	pBegin = 19;
> 	pIf = 20;
> 	pCase = 21;
> 	pWhile = 22;
> 	pRepeat = 23;
> 	lastKeywordToken = 23;
> 	pIdentifier = 24;
> 	firstCompoundInputToken = 24;
> 	pInteger = 25;
> 	pLiteral = 26;
> 	lastCompoundInputToken = 26;
> 	pNewLine = 27;
> 	pEndFile = 28;
> 	pPlus = 29;
> 	pMinus = 30;
> 	pStar = 31;
> 	pColonEquals = 32;
> 	pDot = 33;
> 	pComma = 34;
> 	pSemicolon = 35;
> 	pColon = 36;
> 	pEquals = 37;
> 	pNotEqual = 38;
> 	pLess = 39;
> 	pLessEqual = 40;
> 	pGreaterEqual = 41;
> 	pGreater = 42;
> 	pLeftParen = 43;
> 	pRightParen = 44;
> 	pLeftBracket = 45;
> 	pRightBracket = 46;
> 	pDotDot = 47;
> 	lastSyntaxToken = 47;
156a149
> 
260,261c253,255
< 	eNoSeparator = 8;
< 	lastScanError = 8;
---
> 	eCommentEOF = 8;
> 	eNoSeparator = 9;
> 	lastScanError = 9;
305c299
< 	numberStdIdentifiers = 44;
---
> 	numberStdIdentifiers = 43;
329c323
< 	quote = '"';
---
> 	quote = '''';
563a558,559
> 		eCommentEOF:
> 		    write('unclosed comment');
822,827c818,819
< 	    charClassMap[ord('%')] := lPercent;
< 	    charClassMap[ord('#')] := lHash;
< 	    charClassMap[ord('!')] := lExclamation;
< 	    charClassMap[ord('?')] := lQuestion;
< 	    charClassMap[ord('$')] := lDollar;	
< 	    { Initialize the scan ssl table }
---
> 	    charClassMap[ord('{')] := lLeftBrace;
> 	    charClassMap[ord('}')] := lRightBrace;
828a821
> 	    { Initialize the scan ssl table }
1675,1682c1668
< 
< 	parseInputToken := pNewLine;
< 	newInputLine := false;
< 
< 	while parseInputToken <> pEndFile do
< 	AcceptSyntaxToken;
< 
< 	{ Parser; }
---
> 	Parser;
1684,1685c1670,1671
< 	{ if errorCount > 0 then
< 	    rewrite(parseStream }{, NparseStream}{ );}
---
> 	if errorCount > 0 then
> 	    rewrite(parseStream {, NparseStream} );
