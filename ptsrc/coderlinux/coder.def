	{ Semantic Operations }
	oTempAllocate = 14;
	oTempFree = 15;
	oOperandPushMode = 16; { (16) }
	oOperandChooseMode = 17; { >>16 }
	oOperandPushVariable = 18;
	oOperandPushInteger = 19;
	oOperandPushBoolean = 20;
	oOperandPushJumpCondition = 21; { (15) }
	oOperandChooseJumpCondition = 22; { >>15 }
	oOperandPushStringDescriptor = 23;
	oOperandPushProcedure = 24;
	oOperandPushTrap = 25;
	oOperandPushCaseLow = 26;
	oOperandPushCaseHigh = 27;
	oOperandPushArrayLowerBound = 28;
	oOperandPushArrayUpperBound = 29;
	oOperandPushCopy = 30;
	oOperandPushTemp = 31;
	oOperandSetMode = 32; { (16) }
	oOperandSetLength = 33; { (13) }
	oOperandSetRegnum = 34; { (13) }
	oOperandChooseLength = 35; { >>13 }
	oOperandSetValue = 36; { (13) }
	oOperandChooseValue = 37; { >>13 }
	oOperandChooseManifestValue = 38; { >>13 }
	oOperandIsValueNegative = 39; { >>14 }
	oOperandEnterValueFromCaseTableAddress = 40;
	oOperandEnterValueFromCodeAddress = 41;
	oOperandEnterValueFromStringLength = 42;
	oOperandEnterValueFromDataAreaSize = 43;
	oOperandCompareLeftAndRight = 44; { >>14 }
	oOperandCompareRightAndDest = 45; { >>14 }
	oOperandIsJumpCondition = 46; { >>14 }
	oOperandComplementJumpCondition = 47;
	oOperandAddManifestValues = 48;
	oOperandSubtractManifestValues = 49;
	oOperandMultiplyManifestValues = 50;
	oOperandNegateManifestValue = 51;
	oOperandCompareManifestValues = 52; { >>14 }
	oOperandMergeShuntsWithAddress = 53;
	oOperandMergeShunts = 54;
	oOperandFoldManifestSubscript = 55;
	oOperandSwap = 56;
	oOperandSwapRightAndDest = 57;
	oOperandSwapLeftAndDest = 58;
	oOperandPop = 59;
	oFixPushAddress = 60;
	oFixPushLastAddress = 61;
	oFixSwapAddresses = 62;
	oFixAndFreeShuntList = 63;
	oFixAndFreeFalseBranches = 64;
	oFixForwardBranch = 65;
	oFixPopAddress = 66;
	oEmitProcLabel = 67; { (16) }
	oEmitNone = 68; { (17) }
	oEmitSingle = 69; { (17) }
	oEmitDouble = 70; { (17) }
	oEmitString = 71;
	oEmitStringLength = 72;
	oEmitConditionalForwardBranch = 73;
	oEmitUnconditionalForwardBranch = 74;
	oEmitConditionalBackwardBranch = 75;
	oEmitUnconditionalBackwardBranch = 76;
	oEmitSourceCoordinate = 77;
	oEmitMergeSourceCoordinate = 78;
	oEmitCaseMergeBranch = 79;
	oEmitCaseBranchTable = 80;
	oCasePush = 81;
	oCasePop = 82;
	oCaseEnterTCodeAddress = 83;
	oCaseEnterVariantAddress = 84;
	oCaseEnterMergeAddress = 85;
	oCaseEnterAbortAddress = 86;
	oArrayEnterLowerBound = 87;
	oArrayEnterUpperBound = 88;
	oOptionTestChecking = 89; { >>14 }

	{ Input Tokens }
	tMultiply = 0;
	firstInputToken = 0;
	tDivide = 1;
	tModulus = 2;
	tAdd = 3;
	tSubtract = 4;
	tEQ = 5;
	tNE = 6;
	tGT = 7;
	tGE = 8;
	tLT = 9;
	tLE = 10;
	tAnd = 11;
	tInfixAnd = 12;
	tOr = 13;
	tInfixOr = 14;
	tNegate = 15;
	tNot = 16;
	tChr = 17;
	tOrd = 18;
	tEoln = 19;
	tEOF = 20;
	tVarParm = 21;
	tFetchAddress = 22;
	tFetchInteger = 23;
	tFetchString = 24;
	tFetchBoolean = 25;
	tAssignBegin = 26;
	tAssignAddress = 27;
	tAssignInteger = 28;
	tAssignString = 29;
	tAssignBoolean = 30;
	tStoreParmAddress = 31;
	tStoreParmInteger = 32;
	tStoreParmString = 33;
	tStoreParmBoolean = 34;
	tSubscriptBegin = 35;
	tSubscriptAddress = 36;
	tSubscriptInteger = 37;
	tSubscriptString = 38;
	tSubscriptBoolean = 39;
	tArrayDescriptor = 40;
	tFileDescriptor = 41;
	tIfBegin = 42;
	tIfEnd = 43;
	tCaseBegin = 44;
	tWhileBegin = 45;
	tDoBegin = 46;
	tDoBreakIf = 47;
	tCallBegin = 48;
	tParmEnd = 49;
	tProcedureEnd = 50;
	tWriteBegin = 51;
	tReadBegin = 52;
	tTrapBegin = 53;
	tWriteEnd = 54;
	tReadEnd = 55;
	tCaseElse = 56;
	tConcatenate = 57;
	tSubstring = 58;
	tLength = 59;
	tIndex = 60;
	tStringEqual = 61;
	tLiteralAddress = 62;
	firstCompoundToken = 62;
	tLiteralInteger = 63;
	tLiteralString = 64;
	tLiteralBoolean = 65;
	tIfThen = 66;
	tIfMerge = 67;
	tWhileTest = 68;
	tWhileEnd = 69;
	tCaseSelect = 70;
	tCaseMerge = 71;
	tCaseEnd = 72;
	tDoTest = 73;
	tDoEnd = 74;
	tSkipProc = 75;
	tCallEnd = 76;
	tLineNumber = 77;
	tTrap = 78;
	lastCompoundToken = 78;
	tEndOfFile = 79;
	lastInputToken = 79;

	{ Output Tokens }

	{ Input/Output Tokens }

	{ Error Codes }
	eDivisionByZero = 10;
	firstErrorCode = 10;
	lastSslErrorCode = 10;

	{ Type Values }
	{ Type 13 }
	minusOne = -1;
	zero = 0;
	null = 0;
	one = 1;
	two = 2;
	four = 4;
	eight = 8;
	ten = 10;
	twelve = 12;
	stringSize = 1024;
	regAX = 1;
	regBX = 2;
	regCX = 3;
	regDX = 4;
	trHalt = 0;
	trReset = 1;
	trRewrite = 2;
	trRead = 3;
	trReadln = 4;
	trWrite = 5;
	trWriteln = 6;
	trWriteInteger = 8;
	trReadInteger = 10;
	trAssign = 12;
	trSubscriptAbort = 13;
	trCaseAbort = 14;
	trEoln = 15;
	trEof = 16;
	trAssignString = 101;
	trChrString = 102;
	trConcatenate = 103;
	trSubstring = 104;
	trLength = 105;
	trStringIndex = 106;
	trStringEqual = 107;
	trReadString = 108;
	trWriteString = 109;
	byte = 1;
	word = 2;
	string = 3;
	{ Type 14 }
	no = 0;
	yes = 1;
	{ Type 15 }
	iJalways = -9;
	iJhi = -8;
	iJlos = -7;
	iJge = -6;
	iJlt = -5;
	iJle = -4;
	iJgt = -3;
	iJne = -2;
	iJeq = -1;
	iJnever = 0;
	{ Type 16 }
	mStatic = 1;
	mStaticManifest = 2;
	mTemp = 3;
	mTempIndirect = 4;
	mTempIndirectCaseOffset = 5;
	mStackReg = 6;
	mStack = 7;
	mBaseReg = 8;
	mArgument = 9;
	mManifest = 10;
	mResultReg = 11;
	mRemainderReg = 12;
	mScratchReg1 = 13;
	mScratchReg2 = 14;
	mGlobalBase = 15;
	mLineNum = 16;
	mMainProc = 17;
	mProc = 18;
	mTrap = 19;
	mString = 20;
	mWord = 21;
	{ Type 17 }
	iAdd = 1;
	iCmp = 2;
	iDec = 3;
	iDiv = 4;
	iInc = 5;
	iMul = 6;
	iShl = 7;
	iNeg = 8;
	iSub = 9;
	iMov = 10;
	iPush = 11;
	iPop = 12;
	iLoada = 13;
	iExtend = 14;
	iJmp = 15;
	iCall = 16;
	iReturn = 17;
	iEnter = 18;
	iLeave = 19;
	iGlobl = 20;
	iText = 21;
	iData = 22;
	iWord = 23;
	iSpace = 24;

	{ S/SL Rule Table Addresses } {
	Program = 0;
	EmitProgramPrologue = 7;
	Block = 65;
	EmitProgramEpilogue = 58;
	OperandPopAndFreeTemp = 3940;
	AssignStmt = 386;
	CallStmt = 394;
	IfStmt = 469;
	WhileStmt = 628;
	DoStmt = 685;
	CaseStmt = 745;
	WriteProc = 889;
	ReadProc = 973;
	TrapStmt = 1064;
	Routine = 210;
	OperandNextParameter = 309;
	EmitMove = 4646;
	OperandAssignStringPopPop = 3212;
	Statements = 324;
	OperandPushVariable = 1391;
	OperandPushExpressionAssignPopPop = 2180;
	OperandPushExpression = 1182;
	OperandConvertJumpConditionToData = 3965;
	OperandForceAddressIntoTemp = 4319;
	OperandForceToStack = 4475;
	OperandPushBooleanControlExpression = 522;
	FoldIfStmt = 563;
	OperandInfixOr = 3879;
	OperandForceToJumpCondition = 527;
	EmitTst = 4680;
	SkipToEndIf = 609;
	SkipToEndWhile = 666;
	SkipToEndDo = 726;
	OperandFreeTemp = 3953;
	CaseSelect = 773;
	CaseVariant = 776;
	CaseEnd = 784;
	EmitDefaultCaseAbort = 794;
	EmitCaseSubscriptJump = 830;
	OperandForceIntoTemp = 4249;
	OperandSubtractRightFromLeftPop = 2650;
	WriteParameter = 904;
	ReadParameter = 988;
	OperandAssignIntegerPopPop = 3902;
	EmitStringDescriptor = 1388;
	OperandNegate = 2475;
	OperandAddPop = 2553;
	OperandSubtractPop = 2672;
	OperandMultiplyPop = 2823;
	OperandDividePop = 2969;
	OperandModPop = 3095;
	OperandNot = 3875;
	OperandOrPop = 3896;
	OperandEqualPop = 4058;
	OperandGreaterPop = 4133;
	OperandLessPop = 4221;
	OperandIndexPop = 3360;
	OperandConcatenatePop = 3271;
	OperandSubstringPopPop = 3312;
	OperandLength = 3442;
	OperandChr = 3480;
	OperandOrd = 3520;
	OperandStringEqualPop = 3401;
	OperandEolnFunction = 3596;
	OperandEofFunction = 3722;
	OperandSubscriptIntegerPop = 1463;
	OperandSubscriptBooleanPop = 1553;
	OperandSubscriptStringPop = 1492;
	OperandSubscriptNonManifestIntegerPop = 1556;
	OperandSubscriptNonManifestStringPop = 1569;
	OperandSubscriptCharPop = 1521;
	OperandSubscriptNonManifestCharPop = 2012;
	OperandCheckedSubscriptNonManifestIntegerPop = 1582;
	OperandUncheckedSubscriptNonManifestIntegerPop = 1866;
	OperandCheckedSubscriptNonManifestStringPop = 1697;
	OperandUncheckedSubscriptNonManifestStringPop = 1939;
	OperandPushArrayUpperBound = 1826;
	EmitCmp = 4590;
	OperandPushArrayLowerBound = 1812;
	EmitSubscriptAbort = 1845;
	OperandCheckedSubscriptNonManifestCharPop = 2025;
	OperandUncheckedSubscriptNonManifestCharPop = 2127;
	OperandAssignBooleanPopPop = 3935;
	OperandNegateAssignPopPop = 2450;
	OperandAddAssignPopPopPop = 2490;
	OperandSubtractAssignPopPopPop = 2630;
	OperandMultiplyAssignPopPopPop = 2715;
	OperandDivideAssignPopPopPop = 2922;
	OperandNotAssignPopPop = 3784;
	OperandOrdAssignPopPop = 3565;
	OperandAddRightToLeftPop = 2523;
	EmitAdd = 4560;
	OperandForceLeftIntoTemp = 4305;
	EmitSub = 4575;
	OperandMultiplyLeftByRightPop = 2748;
	OperandDivideLeftByRightPop = 2942;
	OperandPrepStringArgForTrap = 3205;
	SaveTempRegsToStack = 3658;
	RestoreTempRegsFromStack = 3690;
	OperandReturnArgFromStringTrap = 3250;
	OperandChrAssignPopPop = 3552;
	OperandAssignCharPopPop = 3925;
	OperandPushFalseTemp = 4042;
	OperandPushTrueTemp = 4026;
	OperandPushTempByte = 4466;
	OperandFoldComparisonPopPop = 4225;
	OperandPushTempWord = 4457;
	OperandForceAddressIntoNewTemp = 4383;
	OperandAreLeftAndRightManifest = 4502; >>14
	OperandLeftOrRightIsTemp = 4531; >>14
	}

	{ S/SL Table Parameters }
	sslTblSize = 4715;
	minSslTableValue = -32767;
	maxSslTableValue = 32767;
