@Program
 ?sProgram (sProgram)
 oSymbolTblPushScope
 oCountPush(three)
 [ (sIdentifier)
 | *:
 @ProgramParameter
  ?sIdentifier (sIdentifier)
  oSymbolStkPushLocalIdentifier
  [ oSymbolStkChooseKind (syUndefined)
  | syUndefined:
  [ oSymbolStkChooseStandardFile (stdOutput)
  | stdOutput:
  oSymbolStkSetKind(syVariable)
  oSymbolStkLinkToStandardType(stdText)
  oTypeStkPushSymbol
  oValuePush(two)
  ] or >
  @AllocateVar
   [ oSymbolStkChooseKind (syVariable)
   | *:
   [ oTypeStkChooseKind (tpFile)
   | tpFile:
   oAllocateAlignOnWord
   oSymbolStkEnterDataAddress
   .tLiteralInteger
   oEmitValue
   % value emitted 2
   .tLiteralAddress
   oEmitDataAddress
   % value emitted 0
   .tFileDescriptor
   oAllocateDescriptor
   ] or >
   >>
  ;AllocateVar
  oSymbolTblEnter
  ] or >
  oSymbolStkPop
  oTypeStkPop
  oValuePop
  >>
 ;ProgramParameter
 }
 [ (sParmEnd)
 | sParmEnd:
 ] or >
 oCountPop
 @Block
  [ (sVar)
  | sVar:
  @VariableDeclarations
   oCountPush(one)
   ?sIdentifier (sIdentifier)
   @PrepareNewVarDeclaration
    oSymbolStkPushLocalIdentifier
    [ oSymbolStkChooseKind (syUndefined)
    | syUndefined:
    ] or >
    >>
   ;PrepareNewVarDeclaration
   [ (sIdentifier)
   | *:
   ] or >
   @VariableAttributes
    @TypeBody
     [ (sIdentifier)
     | *:
     @SimpleType
      [ (sIdentifier)
      | sIdentifier:
      oSymbolStkPushIdentifier
      [ (sBegin)
      | *:
      [ oSymbolStkChooseKind (syType)
      | syType:
      ] or >
      ] or >
      >>
     ;SimpleType
     [ oSymbolStkChooseKind (syType)
     | syType:
     oTypeStkPushSymbol
     [ oTypeStkChooseKind (tpString)
     | *:
     oTypeStkPush(tpNull)
     oSymbolStkPop
     ] or >
     >>
    ;TypeBody
    [ oCountChoose (one)
    | *:
    [ oSymbolStkChooseKind (syUndefined)
    | *:
    oSymbolStkSetKind(syVariable)
    oTypeStkSwap
    [ oTypeStkChooseKind (tpString)
    | *:
    @AllocateVar
     [ oSymbolStkChooseKind (syVariable)
     | *:
     [ oTypeStkChooseKind (tpString)
     | tpString:
     oSymbolStkEnterDataAddress
     oAllocateVariable
     ] or >
     >>
    ;AllocateVar
    [ oTypeStkChooseKind (tpString)
    | *:
    [ oTypeStkChooseTypeReference (yes)
    | *:
    oSymbolStkEnterTypeReference
    oSymbolTblEnter
    oSymbolStkPop
    oCountDecrement
    oTypeStkSwap
    }
    [ oCountChoose (zero)
    | zero:
    ] or >
    oTypeStkPop
    oTypeStkPop
    >>
   ;VariableAttributes
   oCountPop
   >>
  ;VariableDeclarations
  ] or >
  }
  [ (sBegin)
  | *:
  ] or >
  ?sBegin (sBegin)
  @BeginStmt
   [ (sAssignmentStmt)
   | *:
   @Statement
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     [ oSymbolStkChooseKind (syVariable)
     | *:
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 4
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sLiteral)
       | *:
       [ oTypeStkChooseKind (tpString)
       | tpString:
       oTypeStkSetPackedComponentFlag(no)
       ] or >
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpString)
     | *:
     @Expression
      @Operand
       [ (sLiteral)
       | sLiteral:
       oValuePushStringLength
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpString)
       .tLiteralString
       oEmitValue
       % value emitted 1
       oEmitString
       % value emitted 116
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;BinaryOperator
      @TernaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;TernaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpString)
      | tpString:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpString)
      | tpString:
      ] or >
      ] or >
      >>
     ;CompareAndSwapTypes
     [ oTypeStkChooseKind (tpString)
     | tpString:
     .tAssignString
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     >>
    ;AssignmentStmt
    ] or >
    >>
   ;Statement
   }
   [ (sAssignmentStmt)
   | *:
   @Statement
    [ (sAssignmentStmt)
    | sAssignmentStmt:
    @AssignmentStmt
     ?sIdentifier (sIdentifier)
     oSymbolStkPushIdentifier
     [ oSymbolStkChooseKind (syVariable)
     | *:
     .tAssignBegin
     @Variable
      [ oSymbolStkChooseKind (syVariable)
      | syVariable:
      .tLiteralAddress
      oValuePushSymbol
      oEmitValue
      % value emitted 4
      oValuePop
      ] or >
      oTypeStkPushSymbol
      @VariableExtension
       [ (sIdentifier)
       | *:
       [ oTypeStkChooseKind (tpString)
       | tpString:
       oTypeStkSetPackedComponentFlag(no)
       ] or >
       >>
      ;VariableExtension
      >>
     ;Variable
     [ oTypeStkChooseKind (tpString)
     | *:
     @Expression
      @Operand
       [ (sIdentifier)
       | sIdentifier:
       oSymbolStkPushIdentifier
       [ oSymbolStkChooseKind (syVariable)
       | *:
       [ oSymbolStkChooseKind (syVariable)
       | syVariable:
       @Variable
        [ oSymbolStkChooseKind (syVariable)
        | syVariable:
        .tLiteralAddress
        oValuePushSymbol
        oEmitValue
        % value emitted 4
        oValuePop
        ] or >
        oTypeStkPushSymbol
        @VariableExtension
         [ (sLiteral)
         | *:
         [ oTypeStkChooseKind (tpString)
         | tpString:
         oTypeStkSetPackedComponentFlag(no)
         ] or >
         >>
        ;VariableExtension
        >>
       ;Variable
       @VariableOperand
        [ oTypeStkChooseKind (tpString)
        | tpString:
        .tFetchString
        ] or >
        >>
       ;VariableOperand
       ] or >
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sLiteral)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sLiteral)
       | *:
       >>
      ;BinaryOperator
      @TernaryOperator
       [ (sLiteral)
       | *:
       >>
      ;TernaryOperator
      [ (sLiteral)
      | *:
      }
      @Operand
       [ (sLiteral)
       | sLiteral:
       oValuePushStringLength
       oSymbolStkPush(syExpression)
       oTypeStkPush(tpString)
       .tLiteralString
       oEmitValue
       % value emitted 1
       oEmitString
       % value emitted 98
       oValuePop
       ] or >
       >>
      ;Operand
      @UnaryOperator
       [ (sSubtract)
       | *:
       >>
      ;UnaryOperator
      @BinaryOperator
       [ (sSubtract)
       | sSubtract:
       .tSubtract
       oTypeStkPush(tpInteger)
       @CompareOperandAndResultTypes
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpString)
         | *:
         #eTypeMismatch
         line 5: type clash
         ] or >
         >>
        ;CompareAndSwapTypes
        oTypeStkPop
        @CompareAndSwapTypes
         [ oTypeStkChooseKind (tpInteger)
         | tpInteger:
         oTypeStkSwap
         [ oTypeStkChooseKind (tpString)
         | *:
         #eTypeMismatch
         line 5: type clash
         ] or >
         >>
        ;CompareAndSwapTypes
        oTypeStkPop
        oSymbolStkPop
        oSymbolStkSetKind(syExpression)
        >>
       ;CompareOperandAndResultTypes
       ] or >
       >>
      ;BinaryOperator
      @TernaryOperator
       [ (sExpnEnd)
       | *:
       >>
      ;TernaryOperator
      [ (sExpnEnd)
      | sExpnEnd:
      ] or >
      >>
     ;Expression
     @CompareAndSwapTypes
      [ oTypeStkChooseKind (tpInteger)
      | tpInteger:
      oTypeStkSwap
      [ oTypeStkChooseKind (tpString)
      | *:
      #eTypeMismatch
      line 5: type clash
      ] or >
      >>
     ;CompareAndSwapTypes
     [ oTypeStkChooseKind (tpString)
     | tpString:
     .tAssignString
     ] or >
     oSymbolStkPop
     oTypeStkPop
     oSymbolStkPop
     oTypeStkPop
     >>
    ;AssignmentStmt
    ] or >
    >>
   ;Statement
   }
   [ (sEnd)
   | sEnd:
   ] or >
   >>
  ;BeginStmt
  >>
 ;Block
 [ oSymbolTblLookupExternal (no)
 | *:
 oSymbolTblPopScope
 .tTrapBegin
 .tTrap
 oEmitTrapKind(trHalt)
 % value emitted 0
 >>
;Program
