Assignment 4
Due: April 13th, 2017

Phase 3 Fixes:
 - Added check to oSymbolTblStripScope to make sure public procedures don't have their lexical level decremented
 - Forced ConstantDefinitions, TypeDefinitions and VariableDefinitions to require an sIdentifier
 - Fixed ConstantValue handling of string literals:
   -- The data address allocated for the string needed to be emitted after .tAssignBegin. Previously the string length was being emitted twice.
 - allowed for syPublicProcedures (in addition to syProcedures) in Call Stmt
 - fixed the output and semantic operations when an else case is reached

Added Garnet string traps
 - Copied new ptruntime.c file from "/cas/course/cisc458/garnet/ptruntimelinux" into ptsrc/ptruntimelinux/
 - Ran 'make' to update the compiled files
 - Added the new pttrap commands to coder.ssl (traps 101 - 109)
 - Removed old char trap definitions (trWriteString, trWriteChar, trReadChar)

Tokens:
 - coder.ssl's input tokens were modified to match semantic.ssl's output tokens

Data kinds:
 - string was added to data kinds (as number 3)

Modules:
 - Moved statement logic from the Statements rule into the declarations loop in the Block rule
 - Statements logic placed at lower precedence than declarations operations in the loop
 - Kept procedure handling as a separate step after this main loop

Do Statements
 - Created the DoStmt rule to handle do statements. It utilizes a modified version of the WhileStmt rule.
   -- Statements are allowed before the condition check
   -- The break condition is no longer complemented
   -- Token consumption was changed to match Do statements

String Tokens:
 - Added tIndex, tConcatenate, tSubstring, tLength, and tStringEqual to the OperandPushExpression options
 - Added tSubscriptString and tFetchString to OperandPushVariable
 - Removed tFetchChar from OperandPushVariable
 - Added tAssignString to OperandPushExpressionAssignPopPop
 - Removed tLiteralChar and tStoreParmChar and replaced with tLiteralString and tStoreParmString
 - Removed tStringDescriptor and tSkipString and replaced tSkipString with tLiteralString
 - Removed tAssignChar and tSubscriptChar

String Operations:
 - Added OperandStringAssignPopPop to call tpAssignString
 -  Removed oOperandPushChar operations
 - Left oOperandPushStringDescriptor as the same and left it untouched in coder.pt as well

 Coder.pt:
 - Allowed input and output of zero length strings by removing assert5 and changing loop conditions
 - Changed OperandFoldManifestSubscript to have a case for string and scale by 1024