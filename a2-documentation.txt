Assignment 2
Due: March 1st, 2017

The changes were broken into different sections, outlined below, to allow partners to work simultaneously. Most changes were made in parser.ssl, with a few changes to parser.pt and parser.deff for token updates.

The first change was to fix the broken parser from Assignment 1. This was done by removing the added code to the bottom of parser.pt and uncommenting the original code.

Token Changes:
 - Removed unused PT keyword input tokens from parser.ssl: not, until, program, const, procedure, begin, and repeat
 - Added garnet keyword inputs to parser.ssl: using, val, def, unless, elsif, break, when, Modules
 - Modified input tokens for Garnet in parser.ssl: pColonEquals became pAssign, pNot added, pEquals changed to '==', pNotEquals changed to '!=', and pHash, pQuestion and pDollar added.
 - Add garnet semantic tokens for parser output to parser.ssl, and copied the compiled output of parser.deff to parser.pt. Tokens: sPublic, sModule, sDoStmt, sBreakIf, sSubstring, sLength, and sIndex

Programs:
 - Modified parser.ssl so programs start with 'using' instead of 'Program'
 - Enabled programs to have multiple identifiers, as in 'using name1, name2'

Declarations:
 - Declarations include specifying any of the following: constants, variables, types, routines, and modules
 - The different declaration types can occur in any order, but all declarations must occur at the start of a block

Statements:
 - Declarations are followed by Statements. These include expressions and if, call, unless, do, case, and while statements. 
 - A block of statements is surrounded by .sBegin and .sEnd to maintain compatibility with the PT compiler. This will simplify the semantic analysis stage of compilation.

Routines (Procedures):

Modules:

Statements:

Strings:

Precedence: