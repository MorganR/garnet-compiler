Assignment 2
Due: March 1st, 2017

The changes were broken into different sections, outlined below, to allow partners to work simultaneously. Most changes were made in parser.ssl, with a few changes to parser.pt and parser.deff for token updates.

The first change was to fix the broken parser from Assignment 1. This was done by removing the added code to the bottom of parser.pt and uncommenting the original code.

Token Changes:
 - Removed unused PT keyword input tokens from parser.ssl: not, until, program, const, procedure, begin, and repeat
 - Added garnet keyword inputs to parser.ssl: using, val, def, unless, elsif, break, when, Modules
 - Modified input tokens for Garnet in parser.ssl: pColonEquals became pAssign, pNot added, pEquals changed to '==', pNotEquals changed to '!=', and pHash, pQuestion and pDollar added.
 - Add garnet semantic tokens for parser output to parser.ssl, and copied the compiled output of parser.deff to parser.pt. Tokens: sPublic, sModule, sDoStmt, sBreakIf, sSubstring, sLength, and sIndex

Programs:
 - Modified parser.ssl so programs start with 'using' instead of 'Program'
 - Enabled programs to have multiple identifiers, as in 'using name1, name2'

Declarations:
 - Declarations include specifying any of the following: constants, variables, types, routines, and modules
 - The different declaration types can occur in any order, but all declarations must occur at the start of a block

Statements:
 - Declarations are followed by Statements. These include expressions and if, call, unless, do, case, and while statements. 
 - A block of statements is surrounded by .sBegin and .sEnd to maintain compatibility with the PT compiler. This will simplify the semantic analysis stage of compilation.
 - Elsifs were implemented using the second recommended way, which is more parser intensive and allows for no changes to later phases in the handling of if statements.
 - The else clause of the case statement was added by adding a third condition within the CaseStmt rule.
 - Do statements were implemented, allowing for a statement block before the exit condition of the loop is checked and another after that. 
 - Repeat Statements (and the associated rule) were removed.
 - Consumption of the 'end' keyword at the end of if statements (and unless statements) was added. This was done outside of the if statement method as an if, even with elsifs, only has one end token input.
 - Consumption of the 'do' statement was added to convert from Pascal to Garnet while loops 


Routines (Procedures):
 - Routines start with 'def' instead of 'Procedure'.
 - Routines can have 0 or more arguments, with or without 'var' declarations for the arguments.
 - Just like a main program, routines consist of Declarations followed by Statements
 - Nesting of routines is allowed

Modules:
 - Modules start with 'module' and are new to garnet
 - Similar to Routines, modules consist of declarations followed by statements
 - Modules use a slightly modified Declarations rule to allow Routines to be declared public with a '*'. This is only done for Module declarations because it would not make sense anywhere else in a program.
 - Nesting of modules is allowed

Strings:
 - Removing handling of chars for strings was done in Assignment #1
 - Added input and output tokens for '#', '$' and '?'
 - Added new precedence rule called "simple term" for substring '$' in order to make precedence between '#' and '?'
 - Changed all calls at term level to call simple term which in turn calls factor (for suubstring precedence)
 - Added logic for # at same precedence as 'not' (can only use other factors)
 - Added logic for ? at same precedence as 'mod' and 'div' (can only use simple terms)
 - Added logic for $ at new precedence level (can only use simple terms)

Precedence:
 - Aside from the precedence changes in handling of Strings as outlined above, the precedence has not changed from PT
